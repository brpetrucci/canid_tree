# source setup
source("scripts/avg_morpho_setup.Rev")

# separate models by number of states present
for (k in 2:4) {
k <- 4
  # temporary copy
  morpho_bystate <- morpho

  # keep characters only with sample space of this size
  morpho_bystate.setNumStatesPartition(k)
  # note this finds states with maximum number (k-1), 
  # not count every state in every character

  # er scale - if it is 6200, equivalent to no categories among states
  er_scale ~ dnReversibleJumpMixture(62000, dnLognormal(0.0, sd = 2 * 0.587405), 0.5)
  
  # need this multiplier for the case of when er_scale is 62000
  m_er_dist ~ dnExponential(1)

  # initial value
  er_scale.setValue(1)

  # moves
  moves.append( mvRJSwitch(er_scale, weight = 10.0) )
  moves.append( mvScale(er_scale, weight = 10.0) )
  moves.append( mvScale(m_er_dist, weight = 5) )
  
  # same for pi
  pi_scale ~ dnReversibleJumpMixture(62000, dnLognormal(0.0, sd = 2 * 0.587405), 0.5)
  m_pi_dist ~ dnExponential(1)

  # initial value
  pi_scale.setValue(1)
  
  # moves
  moves.append( mvRJSwitch(pi_scale, weight = 10.0) )
  moves.append( mvScale(pi_scale, weight = 10.0) )
  moves.append( mvScale(m_pi_dist, weight = 5) )

  # indicators
  er_indicator := ifelse(er_scale == 62000, 0, 1)
  pi_indicator := ifelse(pi_scale == 62000, 0, 1)

  # and the corresponding multipliers
  m_er := ifelse(er_scale == 62000, m_er_dist, 1)
  m_pi := ifelse(pi_scale == 62000, m_pi_dist, 1)

  # get the category values
  er_cats := fnDiscretizeBeta(er_scale, er_scale, 4)
  pi_cats := fnDiscretizeBeta(pi_scale, pi_scale, 4)

  # we want to test the JC, F81 and GTR model
  # for each of the categories, set a matrix
  for (j in 1:4) {
    Q_JC[j] <- fnJC(k)
    Q_F81[j] := fnF81(m_pi * Simplex(fnDiscretizeBeta(pi_cats[j], pi_cats[j], k)))
    Q_GTR[j] := fnGTR(m_er * Simplex(fnDiscretizeBeta(er_cats[j], er_cats[j], sum(1:(k-1)))),  
                      m_pi * Simplex(fnDiscretizeBeta(pi_cats[j], pi_cats[j], k))) 
  }
 
  # indicator for this state size   
  Q_indicator ~ dnCategorical( simplex(1, 1, 1) )
  moves.append( mvRandomGeometricWalk(Q_indicator, weight = 5, tune = FALSE) )

  # and set up final Q for this iteration
  Q_vec := v(Q_JC, Q_F81, Q_GTR)
  Q := Q_vec[Q_indicator]

  # finally, site matrices to see what proportion of states is in which of the 4 categories
  matrix_probs ~ dnDirichlet( rep(1, 4) )
  moves.append( mvBetaSimplex(matrix_probs, weight = 3) )
  moves.append( mvDirichletSimplex(matrix_probs, weight = 1.5) )
    
  # set up CTMC for this size
  morphoCTMC ~ dnPhyloCTMC(tree = phy, siteRates = site_rates, 
                           Q = Q, siteMatrices = matrix_probs, type = "Standard")
  morphoCTMC.clamp(morpho_bystate)

  # make the model object
  mymodel = model(phy)

  ###
  # set up monitors and run
  
  # clear monitors
  clear(monitors)
  monitors = VectorMonitors()

  # monitors
  monitors.append( mnModel(filename = "output_morpho_avg/output_morpho_avg_" + k + "/morpho_avg_" + k + ".log", printgen = 1, separator = TAB) )
  monitors.append( mnFile(filename = "output_morpho_avg/output_morpho_avg_" + k + "/morpho_avg_" + k + ".trees", printgen = 10, phy) )
  monitors.append( mnScreen(printgen = 1000, Q_indicator, alpha_indicator, er_indicator, pi_indicator) )
  # to the screen we will just worry about the indicators

  # run MCMC
  mymcmc = mcmc(mymodel, moves, monitors, nruns = 2, combine = "mixed")
  mymcmc.run(generations = 100, tuningInterval = 200, checkpointInterval = 100, checkpointFile = "output_morpho_avg/output_morpho_avg_" + k + "/morpho_avg_" + k + ".state")
  
}

# quit
q()
