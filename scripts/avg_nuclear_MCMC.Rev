##########################################
## Model averaging for nuclear DNA data ##
##        EEOB 563 final project        ##
##       Bruno do Rosario Petrucci      ##
##########################################

###
# set up basic objects for the analysis

# base terminal for project
baseDir <- "/home/petrucci/canid_tree/"

# read nuclear DNA data
nuclear <- readDiscreteCharacterData(baseDir + "data/nuclear.nex")

# some quantities that we may like to use later
nTaxa <- nuclear.ntaxa()
nBranches <- 2 * nTaxa - 3
taxa <- nuclear.taxa()

# set up moves and monitor vectors
moves = VectorMoves()
monitors = VectorMonitors()

###
# set up tree model

# topology
top ~ dnUniformTopology(taxa)
moves.append( mvNNI(topology, weight = nTaxa / 2) )
moves.append( mvSPR(topology, weight = nTaxa / 10) )

# branch lengths
for (i in 1:nBranches) {
  br_lens[i] ~ dnExponential(10)
  moves.append( mvScale(br_lens[i], weight = 1) )
}

# tree length, just to keep track of it
TL := sum(br_lens)

# combine topology and branch lengths
phy := treeAssembly(top, br_lens)

### 
# set up substitution model

# kappa - transition/transversion rate
kappa ~ dnExp(1)
moves.append( mvScale(kappa, weight = 5) )

# pi - base frequencies
pi ~ dnDirichlet( v(1, 1, 1, 1) )
moves.append( mvBetaSimplex(pi, weight = 5) )
moves.append( mvDirichletSimplex(pi, weight = 2.5) )

# exchangeability rates for GTR
er ~ dnDirichlet( v(1, 1, 1, 1, 1, 1) )
moves.append( mvBetaSimplex(er, weight = 5) )
moves.append( mvDirichletSimplex(er, weight = 2.5) )

# rate matrices
Q_JC <- fnJC(4)
Q_K80 := fnK80(kappa)
Q_F81 := fnF81(pi)
Q_HKY := fnHKY(kappa, pi)
Q_GTR := fnGTR(er, pi)

# make a vector for them
Q_vec := v(Q_JC, Q_K80, Q_F81, Q_HKY, Q_GTR)

# model indicator - which model are we looking into?
# the posterior probability of this defines our results
Q_indicator ~ dnCategorical( simplex(1, 1, 1, 1, 1) )
moves.append( mvRandomGeometricWalk(Q_indicator, weight = 10, tune = FALSE) )

# create a vector of sub rates to estimate overall substitution rate
for (i in 1:Q_vec.size()) {
  # loguniform prior to express lack of information on the magnitude
  sub_rate_vec[i] ~ dnLoguniform(0.001, 1)
  moves.append( mvScale(sub_rate_vec[i], weight = 5) )
}

# set Q and sub rates based on Q indicator
Q := Q_vec[Q_indicator]
sub_rate := sub_rate_vec[Q_indicator]

# set alpha, the shape for the gamma variation among sites
alpha ~ dnReversibleJumpMixture(1E8, dnUniform(0, 1E8), 0.5)
# if alpha = 1E8, equivalent to no ASRV; otherwise we have the prior
# 0.5 is the probability that alpha is not 1E8

# initial value
alpha.setValue(1.0)

# moves
moves.append( mvRJSwitch(alpha, weight = 10.0) )
moves.append( mvScale(alpha, weight = 10.0) )

# indicator, like for Q
alpha_indicator := ifelse(alpha == 1E8, 0, 1)

# set up site rates with the discretized gamma
site_rates := fnDiscretizeGamma(alpha, alpha, 4)
# use 4 as a convention - alternatively could set it to
# another parameter and estimate that, a hierarchical model

# set up the probability of invariant sites the same way
p_inv ~ dnReversibleJumpMixture(0, dnBeta(1, 1), 0.5)
# 0 if it is turned off, a uniform if not

# initial value
p_inv.setValue(0.5)

# moves
moves.append( mvRJSwitch(p_inv, weight = 10.0) )
moves.append( mvScale(p_inv, weight = 10.0) )

# indicator
p_inv_indicator := ifelse(p_inv == 0, 0, 1)

# finally define the CTMC model
seq ~ dnPhyloCTMC(tree = phy, Q = Q, branch_rates = sub_rate, siteRates = site_rates, pInv = p_inv, type = "DNA")
seq.clamp(nuclear)

# make the model object
mymodel = model(phy)

###
# set up monitors and run

# monitors
monitors.append( mnModel(filename = "output_nuclear_avg/nuclear_avg.log", printgen = 10, separator = TAB) )
monitors.append( mnFile(filename = "output_nuclear_avg/nuclear_avg.trees", printgen = 10, phy) )
monitors.append( mnScreen(printgen = 1000, Q_indicator, alpha_indicator, p_inv_indicator) )
# to the screen we will just worry about the indicators

# run MCMC
mymcmc = mcmc(mymodel, moves, monitors, nruns = 2, combine = "mixed")
mymcmc.run(generations = 20000, tuningInterval = 200)

# quit
q()
