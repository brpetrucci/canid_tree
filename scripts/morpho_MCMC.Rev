######################################
## Morphological data only analysis ##
##      EEOB 563 final project      ##
##    Bruno do Rosario Petrucci     ##
######################################

###
# set up basic objects for the analysis

# morphological data
morpho <- readDiscreteCharacterData("data/extant_morpho.nex")

# some quantities that we may like to use later
n_taxa <- morpho.ntaxa()
n_branches <- 2 * n_taxa - 3
taxa <- morpho.taxa()

# set up moves and monitor vectors
moves = VectorMoves()
monitors = VectorMonitors()

###
# set up tree model

# topology
top ~ dnUniformTopology(taxa)

moves.append( mvNNI(top, weight = n_branches) )
moves.append( mvSPR(top, weight = n_branches / 3) )

# branch lengths
for (i in 1:n_branches) {
  br_lens[i] ~ dnExponential(10.0)
  moves.append( mvScale(br_lens[i], lambda = 0.01, weight = 5) )
  moves.append( mvScale(br_lens[i], lambda = 0.1, weight = 5) )
  moves.append( mvScale(br_lens[i], lambda = 1, weight = 5) ) 
}

# phylogeny
phy := treeAssembly(top, br_lens)

###
# morphological character evolution model

# restrict morpho to characters with maximum state 1
morpho.setNumStatesPartition(2)

# number of sites
n_sites = morpho.nchar()

# set prior from discrete morphology tutorial
pi_scale ~ dnLognormal( 0.0, sd = 2 * 0.587405 )

# moves
moves.append( mvScale(pi_scale, lambda = 0.01, weight = 2) )
moves.append( mvScale(pi_scale, lambda = 0.1, weight = 2) )
moves.append( mvScale(pi_scale, lambda = 1, weight = 2) )

# set up Q
Q := fnF81(Simplex(fnDiscretizeBeta(pi_scale, pi_scale, 2)))
    
morpho_seq ~ dnPhyloCTMC(tree = phy, Q = Q, nSites = n_sites, 
                         type = "Standard")
morpho_seq.clamp(morpho)

###
# set up final model and run MCMC

# create model object
mymodel = model(phy)

# model monitor - all numerical parameters
monitors.append( mnModel(filename = "output_morpho/morpho.log", printgen = 100) )

# tree monitor - just the tree
monitors.append( mnFile(filename = "output_morpho/morpho.trees", printgen = 100, phy) )  

# to the screen 
monitors.append( mnScreen(printgen = 1000) ) 

# create the mcmc object
mymcmc = mcmc(mymodel, monitors, moves, nruns = 2, combine = "mixed")

# and run it
mymcmc.run(generations = 1500000, tuningInterval = 200, checkpointInterval = 1000, checkpointFile = "output_morpho/morpho.state")

# quit
q()
